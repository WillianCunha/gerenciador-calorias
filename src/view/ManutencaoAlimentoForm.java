/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.AlimentoController;
import entity.CaracteristicaAlimento;
import entity.UnidadePadrao;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import model.AlimentoModel;

/**
 *
 * @author Aluca
 */
public class ManutencaoAlimentoForm extends javax.swing.JDialog {

    private AlimentoController controller;
    private AlimentoModel model;

    /**
     * Creates new form ManutencaoAlimentoForm
     */
    public ManutencaoAlimentoForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    private void doBindings() {

    }

    public void setController(AlimentoController controller) {
        this.controller = controller;
        this.model = this.controller.getModel();
        doBindings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("ID:");

        jLabel2.setText("Nome:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        masterTable.setModel(new CaracteristicaAlimentoTableModel());
        jScrollPane1.setViewportView(masterTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(136, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable masterTable;
    // End of variables declaration//GEN-END:variables

    private class CaracteristicaAlimentoTableModel extends AbstractTableModel {

        private List<CaracteristicaAlimento> caracteristicas;
        private final String[] columnNames = {"ID", "Descrição", "Valor", "Unidade"};
        private final int COLUMN_COUNT = columnNames.length;

        public CaracteristicaAlimentoTableModel() {
            caracteristicas = new ArrayList();
        }

        public CaracteristicaAlimentoTableModel(List<CaracteristicaAlimento> caracteristicas) {
            this();
            this.caracteristicas.addAll(caracteristicas);
        }

        @Override
        public int getRowCount() {
            return caracteristicas.size();
        }

        @Override
        public int getColumnCount() {
            return COLUMN_COUNT;
        }

        @Override
        public String getColumnName(int i) {
            return columnNames[i];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            CaracteristicaAlimento caracteristica = caracteristicas.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return caracteristica.getId();
                case 1:
                    return caracteristica.getDescricao();
                case 2:
                    return caracteristica.getValor();
                case 3:
                    return caracteristica.getUnidadePadrao();
                default:
                    return "";
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            CaracteristicaAlimento caracteristica = caracteristicas.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    try {
                        caracteristica.setId(Long.parseLong(aValue.toString()));
                    } catch (NumberFormatException ex) {
                        Logger.getLogger(ManutencaoAlimentoForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case 1:
                    caracteristica.setDescricao(aValue.toString());
                    break;
                case 2:
                    try {
                        caracteristica.setValor(Float.parseFloat(aValue.toString()));
                    } catch (NumberFormatException ex) {
                        Logger.getLogger(ManutencaoAlimentoForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case 3:
                    caracteristica.setUnidadePadrao((UnidadePadrao) aValue);
                    break;
            }
            fireTableDataChanged();
        }
    }
    
    private class CaracteristicaAlimentoMasterTableListSelectionListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) {
                return;
            }
            int row = masterTable.getSelectedRow();
            if (row >= 0) {
                CaracteristicaAlimento c = model.getCaracteristicaAlimentos().get(row);
                model.setBackupRegistroCaracteristicaAlimento(new CaracteristicaAlimento(c.getId(), c.getDescricao(), c.getValor()));
                model.setRegistroSelecionadoCaracteristicaAlimento(new CaracteristicaAlimento(c.getId(), c.getDescricao(), c.getValor()));
            }
        }
        
    }
    
}
