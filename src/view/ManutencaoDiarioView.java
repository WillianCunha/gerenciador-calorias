/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.DiarioController;
import control.RefeicaoController;
import entity.Diario;
import entity.Refeicao;
import entity.Registro;
import java.awt.Frame;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import model.DiarioModel;
import model.RefeicaoModel;
import org.jdesktop.beansbinding.BindingGroup;
import session.SessionManager;

/**
 *
 * @author Aluca
 */
public class ManutencaoDiarioView extends javax.swing.JInternalFrame {

    private DiarioModel model = new DiarioModel();
    private DiarioController controller = new DiarioController(model);
    private RefeicaoModel refeicaoModel = new RefeicaoModel();
    private RefeicaoController refeicaoController = new RefeicaoController(refeicaoModel);
    
    /**
     * Creates new form ManutencaoDiarioView
     */
    public ManutencaoDiarioView() {
        initComponents();
        controller.carregarDiario(SessionManager.getUsuarioLogado());
        doBindings();
    }
    
    private void doBindings() {
        BindingGroup bindingGroup = new BindingGroup();        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterCriteriaField = new javax.swing.JComboBox();
        filterValueField = new javax.swing.JFormattedTextField();
        applyFilterButton = new javax.swing.JButton();
        clearFilterButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        closeButton = new javax.swing.JButton();
        removeDiaButton = new javax.swing.JButton();
        updateDiaButton = new javax.swing.JButton();
        addDiaButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Manutenção de Diário");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        filterCriteriaField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Data" }));

        try {
            filterValueField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        applyFilterButton.setText("Aplicar");

        clearFilterButton.setText("Limpar");

        masterTable.setModel(new DiarioTableModel());
        jScrollPane1.setViewportView(masterTable);

        closeButton.setText("Fechar");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        removeDiaButton.setText("Remover Dia");

        updateDiaButton.setText("Alterar Dia");

        addDiaButton.setText("Adicionar Dia");
        addDiaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDiaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addDiaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateDiaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeDiaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(filterCriteriaField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyFilterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearFilterButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterCriteriaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(applyFilterButton)
                    .addComponent(clearFilterButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(removeDiaButton)
                    .addComponent(updateDiaButton)
                    .addComponent(addDiaButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        DesktopManager.remove(DesktopManager.MANUTENCAO_DIARIO_VIEW);
    }//GEN-LAST:event_formInternalFrameClosed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void addDiaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDiaButtonActionPerformed
        model.setBackupRegistro(model.getRegistroSelecionado());
        Diario diario = new Diario();
        diario.setRegistroList(Collections.emptyList());
        diario.setUsuario(SessionManager.getUsuarioLogado());
        diario.setNome("Meu Diário");
        model.setRegistroEditado(diario);
        new Thread(() -> {
            ManutencaoDiarioForm form = new ManutencaoDiarioForm((Frame) SwingUtilities.windowForComponent(this), true);
            form.setTitle("Manutenção do Diário");
            form.setController(refeicaoController);
            form.setVisible(true);
        }).start();
    }//GEN-LAST:event_addDiaButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDiaButton;
    private javax.swing.JButton applyFilterButton;
    private javax.swing.JButton clearFilterButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JComboBox filterCriteriaField;
    private javax.swing.JFormattedTextField filterValueField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton removeDiaButton;
    private javax.swing.JButton updateDiaButton;
    // End of variables declaration//GEN-END:variables

    private class DiarioTableModel extends AbstractTableModel {

        private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        private Diario diario;
        private List<Refeicao> refeicoes;
        private final String[] columnNames = {"ID", "Data", "Refeições", "Calorias"};
        private final int COLUMN_COUNT = columnNames.length;

        public DiarioTableModel() {
            diario = new Diario();
            refeicoes = new ArrayList();
        }

        public DiarioTableModel(Diario diario) {
            this();
            this.diario = diario;
        }
        
        public DiarioTableModel(Diario diario, List<Refeicao> refeicoes) {
            this();
            this.refeicoes.addAll(refeicoes);
        }

        @Override
        public int getRowCount() {
            return refeicoes.size();
        }

        @Override
        public int getColumnCount() {
            return COLUMN_COUNT;
        }

        @Override
        public String getColumnName(int i) {
            return columnNames[i];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Refeicao refeicao = refeicoes.get(rowIndex);
            Registro registro = refeicoes.get(rowIndex).getRegistro();
            switch (columnIndex) {
                case 0: // ID
                    return diario.getId();
                case 1: // Data
                    // Não sei exatamento como resgatar a Data de um dia do diario
                    return registro.getData();
                case 2: // Número de refeições
                    return registro.getRefeicaoList().size();
                case 3: // Total calórico diário
                // TODO contabilizar e apresentar o total calórico do dia
                default:
                    return "";
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {            
            Registro registro = diario.getRegistroList().get(rowIndex);
            int numRefeicoes = 0;
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            switch (columnIndex) {
                case 0: // ID
                    try {
                        diario.setId(Long.parseLong(aValue.toString()));
                    } catch (NumberFormatException ex) {
                        Logger.getLogger(ManutencaoDiarioView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case 1: // Data
                    try {
                        registro.setData(df.parse(aValue.toString()));
                    } catch (ParseException ex) {
                        Logger.getLogger(ManutencaoDiarioView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                case 2: // Número de refeições, não sei exatamento como fazer
                    numRefeicoes = Integer.parseInt(aValue.toString());
                    break;
                case 3: // Total calórico diário
                    break;                    
            }
            fireTableDataChanged();
        }

    }
    
    private class DiarioMasterTableListSelectionListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) {
                return;
            }
            int row = masterTable.getSelectedRow();
            if (row >= 0) {
//                Refeicao = model.get
            }
        }
        
    }

}
